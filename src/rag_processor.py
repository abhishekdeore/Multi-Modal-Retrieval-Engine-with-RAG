import os
import google.generativeai as genai
import textwrap

class RAGProcessor:
    def __init__(self, api_key=None):
        """
        Initializes the RAGProcessor with optional API key for the Gemini API.

        Args:
        api_key (str, optional): The API key to access the Gemini API. Defaults to None.
        """
        # Store the API key and initialize attributes
        self.api_key = api_key
        self.client = None
        self.initialized = False
        
        # Initialize the API client if an API key is provided
        if api_key:
            self.initialize(api_key)
    
    def initialize(self, api_key):
        """
        Initializes the Gemini API client using the provided API key.

        Args:
        api_key (str): The API key for Gemini API access.

        Returns:
        bool: True if initialization was successful, False otherwise.
        """
        try:
            # Configure the API client with the given API key
            self.api_key = api_key
            genai.configure(api_key=api_key)
            self.client = genai.GenerativeModel('gemini-2.0-flash')
            self.initialized = True
            print("RAG processor initialized successfully with Gemini API.")
            return True
        except Exception as e:
            print(f"Error initializing RAG processor: {e}")
            self.initialized = False
            return False
    
    def generate_answer(self, query, context, stream=False):
        """
        Generates an answer based on the provided query and context using the Gemini API.

        Args:
        query (str): The user's question or query.
        context (str): The context information relevant to the query.
        stream (bool): If set to True, returns a generator for streaming the content. Defaults to False.

        Returns:
        str or generator: The answer generated by the Gemini model or an error message.
        """
        if not self.initialized:
            return "RAG processor not initialized. Please provide a valid API key."
        
        try:
            # Format the context and question into a prompt
            prompt = self._create_prompt(query, context)
            
            # Generate the response from the Gemini API
            if stream:
                response = self.client.generate_content(prompt, stream=True)
                # Return the generator for streaming responses
                return response
            else:
                response = self.client.generate_content(prompt)
                return response.text
        except Exception as e:
            return f"Error generating answer: {e}"
    
    def _create_prompt(self, query, context):
        """
        Creates a structured prompt for the Gemini model based on the query and context.

        Args:
        query (str): The user's question.
        context (str): The provided context that informs the response.

        Returns:
        str: A well-formatted prompt for the Gemini model.
        """
        prompt = textwrap.dedent(f"""
        You are an intelligent assistant that provides helpful and accurate information based on the given context.
        
        CONTEXT:
        {context}
        
        USER QUERY:
        {query}
        
        Please answer the user's query based only on the provided context. If the context doesn't contain enough information to fully answer the query, acknowledge this limitation in your response. Be concise, clear, and helpful.
        """)
        return prompt
